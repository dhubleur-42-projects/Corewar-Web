name: Dump and Anonymize DB

on:
    workflow_dispatch:
    schedule:
        - cron: '0 2 * * 0' # At 02:00 on Sunday

concurrency:
    group: ${{ github.workflow }}
    cancel-in-progress: true

jobs:
    dump-and-anonymize:
        name: Dump and Anonymize Database
        runs-on: ubuntu-latest

        steps:
            - name: Install OpenVPN
              run: |
                  sudo apt-get update
                  sudo apt-get install -y openvpn openvpn-systemd-resolved

            - name: Set up OpenVPN config
              run: |
                  echo "${{ secrets.OVPN_CONFIG_DATA }}" | base64 -d > /tmp/ci.ovpn

            - name: Set up kubeconfig
              run: |
                  mkdir -p ~/.kube
                  echo ${{ secrets.KUBE_CONFIG_DATA }} | base64 -d > ~/.kube/config

            - name: Checkout
              uses: actions/checkout@v4

            - name: Start OpenVPN
              run: |
                  sudo openvpn --config /tmp/ci.ovpn --daemon
                  sleep 10

            - name: Delete old job
              run: |
                  kubectl delete job db-dump -n corewar-prod --ignore-not-found

            - name: Run job
              run: |
                  kubectl apply -f ./infra/manifests/prod/101-dump-db.yaml
                  kubectl wait --for=condition=complete job/db-dump -n corewar-prod --timeout=600s
                  echo ====== Dump db job logs ======
                  kubectl logs job/db-dump -n corewar-prod
                  echo ====== End of logs ======

            - name: Disconnect VPN
              run: |
                  sudo killall openvpn || true

    build-db-image:
        name: Build and push db image
        runs-on: ubuntu-latest
        needs: dump-and-anonymize
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-3

            - name: Download latest dump
              run: |
                  LATEST_DUMP=$(aws s3 ls s3://${{ secrets.AWS_BUCKET }}/ | sort | tail -n 1 | awk '{print $4}')
                  echo "Latest dump found: $LATEST_DUMP"
                  aws s3 cp s3://${{ secrets.AWS_BUCKET }}/$LATEST_DUMP ./infra/db/anonymized_dump.sql
                  echo "DUMP_FILE=$LATEST_DUMP" >> $GITHUB_ENV
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: eu-west-3

            - name: Log in to Docker Registry
              uses: docker/login-action@v3
              with:
                  registry: registry.ozyria.fr
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Prepare image tag
              id: vars
              run: echo "IMAGE_TAG=time-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

            - name: Build and push db image
              uses: docker/build-push-action@v6
              with:
                  context: ./infra/db
                  file: ./infra/db/Dockerfile
                  push: true
                  platforms: linux/amd64
                  tags: |
                      registry.ozyria.fr/corewar/filled-db:${{ env.IMAGE_TAG }}
                      registry.ozyria.fr/corewar/filled-db:latest

            - name: Delete dump from S3
              run: |
                  echo "Deleting dump $DUMP_FILE"
                  aws s3 rm s3://${{ secrets.AWS_BUCKET }}/$DUMP_FILE

    clean-old-images:
        name: Clean old images
        runs-on: ubuntu-latest
        needs: build-db-image
        steps:
            - name: List filled-db tags
              id: list-tags
              run: |
                  IMAGE="corewar/filled-db"
                  echo "Listing tags..."
                  TAGS=$(curl -s -u ${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }} \
                    "https://registry.ozyria.fr/v2/$IMAGE/tags/list" \
                    | jq -r '.tags[]' | paste -sd "," -)
                  echo "tags=$TAGS" >> $GITHUB_OUTPUT
                  echo "Found tags: $TAGS"

            - name: Delete old filled-db tags
              if: steps.list-tags.outputs.tags != ''
              run: |
                  IMAGE="corewar/filled-db"
                  TAGS="${{ steps.list-tags.outputs.tags }}"

                  IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
                    
                  for TAG in "${TAG_ARRAY[@]}"; do
                    CREATED=$(curl -s -u ${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }} \
                      "https://registry.ozyria.fr/v2/$IMAGE/manifests/$TAG" \
                      | jq -r '.history[0].v1Compatibility | fromjson.created' 2>/dev/null || echo "1970-01-01T00:00:00Z")
                    echo "$CREATED $TAG"
                  done | sort -r | tee sorted_tags.txt

                  tail -n +6 sorted_tags.txt | while read CREATED TAG; do
                    echo "Deleting old tag $TAG ($CREATED)..."
                    DIGEST=$(curl -s -I -u ${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }} \
                      -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
                      "https://registry.ozyria.fr/v2/$IMAGE/manifests/$TAG" \
                      | grep docker-content-digest | awk '{print $2}' | tr -d $'\r')

                    if [ -n "$DIGEST" ]; then
                      curl -s -X DELETE -u ${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }} \
                        "https://registry.ozyria.fr/v2/$IMAGE/manifests/$DIGEST"
                      echo "Deleted $TAG ($DIGEST)"
                    else
                      echo "Skipping $TAG, could not resolve digest."
                    fi
                  done
